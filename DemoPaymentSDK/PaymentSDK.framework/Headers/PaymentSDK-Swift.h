#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef PAYMENTSDK_SWIFT_H
#define PAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UITextField;

/// <h3>MaskedTextFieldDelegate</h3>
/// UITextFieldDelegate, which applies masking to the user input.
/// Might be used as a decorator, which forwards UITextFieldDelegate calls to its own listener.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK23MaskedTextFieldDelegate")
@interface MaskedTextFieldDelegate : NSObject <UITextFieldDelegate>
@property (nonatomic, copy) IBInspectable NSString * _Nonnull maskFormat;
@property (nonatomic) IBInspectable BOOL autocomplete;
@property (nonatomic) IBInspectable BOOL autocompleteOnFocus;
- (nonnull instancetype)init;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface MaskedTextFieldDelegate (SWIFT_EXTENSION(PaymentSDK))
/// Workaround to support Interface Builder delegate outlets.
/// Allows assigning <code>MaskedTextFieldDelegate.listener</code> within the Interface Builder.
/// Consider using <code>MaskedTextFieldDelegate.listener</code> property from your source code instead of
/// <code>MaskedTextFieldDelegate.delegate</code> outlet.
@property (nonatomic, strong) IBOutlet NSObject * _Nullable delegate;
@end



/// <h3>MaskedTextFieldDelegateListener</h3>
/// Allows clients to obtain value extracted by the mask from user input.
/// Provides callbacks from listened UITextField.
SWIFT_PROTOCOL("_TtP10PaymentSDK31MaskedTextFieldDelegateListener_")
@protocol MaskedTextFieldDelegateListener <UITextFieldDelegate>
@optional
/// Callback to return extracted value and to signal whether the user has complete input.
- (void)textField:(UITextField * _Nonnull)textField didFillMandatoryCharacters:(BOOL)complete didExtractValue:(NSString * _Nonnull)value;
@end

@protocol PaymentCardAddedDelegate;
@class NSCoder;
@class PaymentCard;
@class NSBundle;

SWIFT_CLASS("_TtC10PaymentSDK30PaymentAddNativeViewController")
@interface PaymentAddNativeViewController : UIViewController
@property (nonatomic, strong) id <PaymentCardAddedDelegate> _Nullable addDelegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsWidget:(BOOL)isWidget isModal:(BOOL)isModal OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (PaymentCard * _Nullable)getValidCard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PaymentAddNativeViewController (SWIFT_EXTENSION(PaymentSDK)) <MaskedTextFieldDelegateListener>
- (void)textField:(UITextField * _Nonnull)textField didFillMandatoryCharacters:(BOOL)complete didExtractValue:(NSString * _Nonnull)value;
@end



@class NSDictionary;
@class UIImage;

SWIFT_CLASS("_TtC10PaymentSDK11PaymentCard")
@interface PaymentCard : NSObject
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable cardHolder;
@property (nonatomic, copy) NSString * _Nullable fiscalNumber;
@property (nonatomic, copy) NSString * _Nullable termination;
@property (nonatomic) BOOL isDefault;
@property (nonatomic, copy) NSString * _Nullable expiryMonth;
@property (nonatomic, copy) NSString * _Nullable expiryYear;
@property (nonatomic, copy) NSString * _Nullable bin;
@property (nonatomic, copy) NSString * _Nullable nip;
@property (nonatomic, copy) NSString * _Nullable msg;
@property (nonatomic, copy) NSString * _Nullable type;
+ (PaymentCard * _Nullable)createCardWithCardHolder:(NSString * _Nonnull)cardHolder cardNumber:(NSString * _Nonnull)cardNumber expiryMonth:(NSInteger)expiryMonth expiryYear:(NSInteger)expiryYear cvc:(NSString * _Nonnull)cvc SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getJSONString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)getDict SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getCardTypeAsset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PaymentSDKError;

SWIFT_PROTOCOL("_TtP10PaymentSDK24PaymentCardAddedDelegate_")
@protocol PaymentCardAddedDelegate
- (void)cardAdded:(PaymentSDKError * _Nullable)error :(PaymentCard * _Nullable)cardAdded;
- (void)viewClosed;
@end


SWIFT_CLASS("_TtC10PaymentSDK22PaymentDebitParameters")
@interface PaymentDebitParameters : NSObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic) double productAmount;
@property (nonatomic, copy) NSString * _Nonnull productDescription;
@property (nonatomic, copy) NSString * _Nonnull devReference;
@property (nonatomic) double vat;
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic) double productDiscount;
@property (nonatomic) NSInteger installments;
@property (nonatomic, copy) NSString * _Nonnull buyerFiscalNumber;
@property (nonatomic, copy) NSString * _Nonnull sellerId;
@property (nonatomic, copy) NSString * _Nonnull shippingStreet;
@property (nonatomic, copy) NSString * _Nonnull shippingHouseNumber;
@property (nonatomic, copy) NSString * _Nonnull shippingCity;
@property (nonatomic, copy) NSString * _Nonnull shippingZip;
@property (nonatomic, copy) NSString * _Nonnull shippingState;
@property (nonatomic, copy) NSString * _Nonnull shippingCountry;
@property (nonatomic, copy) NSString * _Nonnull shippingDistrict;
@property (nonatomic, copy) NSString * _Nonnull shippingAdditionalAddressInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PaymentSDKClient")
@interface PaymentSDKClient : NSObject
+ (void)setRiskMerchantId:(NSString * _Nonnull)merchantId;
+ (void)setEnvironment:(NSString * _Nonnull)apiCode secretKey:(NSString * _Nonnull)secretKey testMode:(BOOL)testMode;
+ (NSString * _Nonnull)getSecureSessionId SWIFT_WARN_UNUSED_RESULT;
+ (PaymentAddNativeViewController * _Nonnull)createAddWidget SWIFT_WARN_UNUSED_RESULT;
+ (void)add:(PaymentCard * _Nonnull)card uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email callback:(void (^ _Nonnull)(PaymentSDKError * _Nullable, PaymentCard * _Nullable))callback;
+ (void)scanCard:(UIViewController * _Nonnull)presenterViewController callback:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSString * _Nullable, NSString * _Nullable, PaymentCard * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PaymentSDK15PaymentSDKError")
@interface PaymentSDKError : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull descriptionData;
@property (nonatomic, copy) NSString * _Nullable help;
@property (nonatomic, copy) NSString * _Nullable type;
+ (PaymentSDKError * _Nonnull)createError:(NSInteger)code description:(NSString * _Nonnull)description help:(NSString * _Nullable)help type:(NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC10PaymentSDK18PaymentTransaction")
@interface PaymentTransaction : NSObject
@property (nonatomic, strong) NSNumber * _Nullable authorizationCode;
@property (nonatomic, strong) NSNumber * _Nullable amount;
@property (nonatomic, copy) NSDate * _Nullable paymentDate;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable carrierCode;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, strong) NSNumber * _Nullable statusDetail;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable carrierData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h3>PolyMaskTextFieldDelegate</h3>
/// UITextFieldDelegate, which applies masking to the user input, picking the most suitable mask for the text.
/// Might be used as a decorator, which forwards UITextFieldDelegate calls to its own listener.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK25PolyMaskTextFieldDelegate")
@interface PolyMaskTextFieldDelegate : MaskedTextFieldDelegate
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@class UIColor;
@class UIFont;

/// A beautiful and flexible textfield implementation with support for title label, error message and placeholder.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK25SkyFloatingLabelTextField")
@interface SkyFloatingLabelTextField : UITextField
/// The value of the title appearing duration
@property (nonatomic) NSTimeInterval titleFadeInDuration;
/// The value of the title disappearing duration
@property (nonatomic) NSTimeInterval titleFadeOutDuration;
/// A UIColor value that determines the text color of the editable text
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColor;
/// A UIColor value that determines text color of the placeholder label
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull placeholderColor;
/// A UIFont value that determines text color of the placeholder label
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// A UIFont value that determines the text font of the title label
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// A UIColor value that determines the text color of the title label when in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull titleColor;
/// A UIColor value that determines the color of the bottom line when in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull lineColor;
/// A UIColor value that determines the color used for the title label and line when the error message is not <code>nil</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull errorColor;
/// A UIColor value that determines the text color of the title label when editing
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedTitleColor;
/// A UIColor value that determines the color of the line in a selected state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedLineColor;
/// A CGFloat value that determines the height for the bottom line when the control is in the normal state
@property (nonatomic) IBInspectable CGFloat lineHeight;
/// A CGFloat value that determines the height for the bottom line when the control is in a selected state
@property (nonatomic) IBInspectable CGFloat selectedLineHeight;
/// Identifies whether the text object should hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that determines whether the receiver is highlighted.
/// When changing this value, highlighting will be done with animation
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// The text content of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable text;
/// The String to display when the input field is empty.
/// The placeholder can also appear in the title label when both <code>title</code> <code>selectedTitle</code> and are <code>nil</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// The String to display when the textfield is editing and the input is not empty.
@property (nonatomic, copy) IBInspectable NSString * _Nullable selectedTitle;
/// The String to display when the textfield is not editing and the input is not empty.
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
@property (nonatomic, getter=isSelected) BOOL selected;
/// Initializes the control
/// \param frame the frame of the control 
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Intialzies the control by deserializing it
/// \param coder the object to deserialize the control from 
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Invoked when the editing state of the textfield changes. Override to respond to this change.
- (void)editingChanged;
/// Attempt the control to become the first responder
///
/// returns:
/// True when successfull becoming the first responder
- (BOOL)becomeFirstResponder;
/// Attempt the control to resign being the first responder
///
/// returns:
/// True when successfull resigning being the first responder
- (BOOL)resignFirstResponder;
/// Calculate the rectangle for the textfield when it is not being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the textfield when it is being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the placeholder
/// \param bounds The current bounds of the placeholder
///
///
/// returns:
/// The rectangle that the placeholder should render in
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Invoked when the interface builder renders the control
- (void)prepareForInterfaceBuilder;
/// Invoked by layoutIfNeeded automatically
- (void)layoutSubviews;
/// Calculate the content size for auto layout
///
/// returns:
/// the content size to be used for auto layout
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A beautiful and flexible textfield implementation with support for icon, title label, error message and placeholder.
SWIFT_CLASS("_TtC10PaymentSDK33SkyFloatingLabelTextFieldWithIcon")
@interface SkyFloatingLabelTextFieldWithIcon : SkyFloatingLabelTextField
/// A UIFont value that determines the font that the icon is using
@property (nonatomic, strong) UIFont * _Nullable iconFont;
/// A String value that determines the text used when displaying the icon
@property (nonatomic, copy) IBInspectable NSString * _Nullable iconText;
/// A UIColor value that determines the color of the icon in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull iconColor;
/// A UIColor value that determines the color of the icon when the control is selected
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedIconColor;
/// A float value that determines the width of the icon
@property (nonatomic) IBInspectable CGFloat iconWidth;
/// A float value that determines the left margin of the icon.
/// Use this value to position the icon more precisely horizontally.
@property (nonatomic) IBInspectable CGFloat iconMarginLeft;
/// A float value that determines the bottom margin of the icon.
/// Use this value to position the icon more precisely vertically.
@property (nonatomic) IBInspectable CGFloat iconMarginBottom;
/// A float value that determines the rotation in degrees of the icon.
/// Use this value to rotate the icon in either direction.
@property (nonatomic) IBInspectable double iconRotationDegrees;
/// Initializes the control
/// \param frame the frame of the control 
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Intialzies the control by deserializing it
/// \param coder the object to deserialize the control from 
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Calculate the bounds for the textfield component of the control.
/// Override to create a custom size textbox in the control.
/// \param bounds The current bounds of the textfield component
///
///
/// returns:
/// The rectangle that the textfield component should render in
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the textfield when it is being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculates the bounds for the placeholder component of the control.
/// Override to create a custom size textbox in the control.
/// \param bounds The current bounds of the placeholder component
///
///
/// returns:
/// The rectangle that the placeholder component should render in
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Invoked by layoutIfNeeded automatically
- (void)layoutSubviews;
@end


@interface UINavigationController (SWIFT_EXTENSION(PaymentSDK))
- (void)pushPaymentViewControllerWithDelegate:(id <PaymentCardAddedDelegate> _Nonnull)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email;
@end


@class UIView;

@interface UIViewController (SWIFT_EXTENSION(PaymentSDK))
- (PaymentAddNativeViewController * _Nonnull)addPaymentWidgetToView:(UIView * _Nonnull)containerView delegate:(id <PaymentCardAddedDelegate> _Nullable)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
- (void)presentPaymentViewControllerWithDelegate:(id <PaymentCardAddedDelegate> _Nonnull)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef PAYMENTSDK_SWIFT_H
#define PAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UITextField;

/// <h3>MaskedTextFieldDelegate</h3>
/// UITextFieldDelegate, which applies masking to the user input.
/// Might be used as a decorator, which forwards UITextFieldDelegate calls to its own listener.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK23MaskedTextFieldDelegate")
@interface MaskedTextFieldDelegate : NSObject <UITextFieldDelegate>
@property (nonatomic, copy) IBInspectable NSString * _Nonnull maskFormat;
@property (nonatomic) IBInspectable BOOL autocomplete;
@property (nonatomic) IBInspectable BOOL autocompleteOnFocus;
- (nonnull instancetype)init;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface MaskedTextFieldDelegate (SWIFT_EXTENSION(PaymentSDK))
/// Workaround to support Interface Builder delegate outlets.
/// Allows assigning <code>MaskedTextFieldDelegate.listener</code> within the Interface Builder.
/// Consider using <code>MaskedTextFieldDelegate.listener</code> property from your source code instead of
/// <code>MaskedTextFieldDelegate.delegate</code> outlet.
@property (nonatomic, strong) IBOutlet NSObject * _Nullable delegate;
@end



/// <h3>MaskedTextFieldDelegateListener</h3>
/// Allows clients to obtain value extracted by the mask from user input.
/// Provides callbacks from listened UITextField.
SWIFT_PROTOCOL("_TtP10PaymentSDK31MaskedTextFieldDelegateListener_")
@protocol MaskedTextFieldDelegateListener <UITextFieldDelegate>
@optional
/// Callback to return extracted value and to signal whether the user has complete input.
- (void)textField:(UITextField * _Nonnull)textField didFillMandatoryCharacters:(BOOL)complete didExtractValue:(NSString * _Nonnull)value;
@end

@protocol PaymentCardAddedDelegate;
@class NSCoder;
@class PaymentCard;
@class NSBundle;

SWIFT_CLASS("_TtC10PaymentSDK30PaymentAddNativeViewController")
@interface PaymentAddNativeViewController : UIViewController
@property (nonatomic, strong) id <PaymentCardAddedDelegate> _Nullable addDelegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsWidget:(BOOL)isWidget isModal:(BOOL)isModal OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (PaymentCard * _Nullable)getValidCard SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PaymentAddNativeViewController (SWIFT_EXTENSION(PaymentSDK)) <MaskedTextFieldDelegateListener>
- (void)textField:(UITextField * _Nonnull)textField didFillMandatoryCharacters:(BOOL)complete didExtractValue:(NSString * _Nonnull)value;
@end



@class NSDictionary;
@class UIImage;

SWIFT_CLASS("_TtC10PaymentSDK11PaymentCard")
@interface PaymentCard : NSObject
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable cardHolder;
@property (nonatomic, copy) NSString * _Nullable fiscalNumber;
@property (nonatomic, copy) NSString * _Nullable termination;
@property (nonatomic) BOOL isDefault;
@property (nonatomic, copy) NSString * _Nullable expiryMonth;
@property (nonatomic, copy) NSString * _Nullable expiryYear;
@property (nonatomic, copy) NSString * _Nullable bin;
@property (nonatomic, copy) NSString * _Nullable nip;
@property (nonatomic, copy) NSString * _Nullable msg;
@property (nonatomic, copy) NSString * _Nullable type;
+ (PaymentCard * _Nullable)createCardWithCardHolder:(NSString * _Nonnull)cardHolder cardNumber:(NSString * _Nonnull)cardNumber expiryMonth:(NSInteger)expiryMonth expiryYear:(NSInteger)expiryYear cvc:(NSString * _Nonnull)cvc SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getJSONString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)getDict SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getCardTypeAsset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PaymentSDKError;

SWIFT_PROTOCOL("_TtP10PaymentSDK24PaymentCardAddedDelegate_")
@protocol PaymentCardAddedDelegate
- (void)cardAdded:(PaymentSDKError * _Nullable)error :(PaymentCard * _Nullable)cardAdded;
- (void)viewClosed;
@end


SWIFT_CLASS("_TtC10PaymentSDK22PaymentDebitParameters")
@interface PaymentDebitParameters : NSObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic) double productAmount;
@property (nonatomic, copy) NSString * _Nonnull productDescription;
@property (nonatomic, copy) NSString * _Nonnull devReference;
@property (nonatomic) double vat;
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic) double productDiscount;
@property (nonatomic) NSInteger installments;
@property (nonatomic, copy) NSString * _Nonnull buyerFiscalNumber;
@property (nonatomic, copy) NSString * _Nonnull sellerId;
@property (nonatomic, copy) NSString * _Nonnull shippingStreet;
@property (nonatomic, copy) NSString * _Nonnull shippingHouseNumber;
@property (nonatomic, copy) NSString * _Nonnull shippingCity;
@property (nonatomic, copy) NSString * _Nonnull shippingZip;
@property (nonatomic, copy) NSString * _Nonnull shippingState;
@property (nonatomic, copy) NSString * _Nonnull shippingCountry;
@property (nonatomic, copy) NSString * _Nonnull shippingDistrict;
@property (nonatomic, copy) NSString * _Nonnull shippingAdditionalAddressInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PaymentSDKClient")
@interface PaymentSDKClient : NSObject
+ (void)setRiskMerchantId:(NSString * _Nonnull)merchantId;
+ (void)setEnvironment:(NSString * _Nonnull)apiCode secretKey:(NSString * _Nonnull)secretKey testMode:(BOOL)testMode;
+ (NSString * _Nonnull)getSecureSessionId SWIFT_WARN_UNUSED_RESULT;
+ (PaymentAddNativeViewController * _Nonnull)createAddWidget SWIFT_WARN_UNUSED_RESULT;
+ (void)add:(PaymentCard * _Nonnull)card uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email callback:(void (^ _Nonnull)(PaymentSDKError * _Nullable, PaymentCard * _Nullable))callback;
+ (void)scanCard:(UIViewController * _Nonnull)presenterViewController callback:(void (^ _Nonnull)(BOOL, NSString * _Nullable, NSString * _Nullable, NSString * _Nullable, PaymentCard * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PaymentSDK15PaymentSDKError")
@interface PaymentSDKError : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull descriptionData;
@property (nonatomic, copy) NSString * _Nullable help;
@property (nonatomic, copy) NSString * _Nullable type;
+ (PaymentSDKError * _Nonnull)createError:(NSInteger)code description:(NSString * _Nonnull)description help:(NSString * _Nullable)help type:(NSString * _Nullable)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC10PaymentSDK18PaymentTransaction")
@interface PaymentTransaction : NSObject
@property (nonatomic, strong) NSNumber * _Nullable authorizationCode;
@property (nonatomic, strong) NSNumber * _Nullable amount;
@property (nonatomic, copy) NSDate * _Nullable paymentDate;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable carrierCode;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, strong) NSNumber * _Nullable statusDetail;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable carrierData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <h3>PolyMaskTextFieldDelegate</h3>
/// UITextFieldDelegate, which applies masking to the user input, picking the most suitable mask for the text.
/// Might be used as a decorator, which forwards UITextFieldDelegate calls to its own listener.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK25PolyMaskTextFieldDelegate")
@interface PolyMaskTextFieldDelegate : MaskedTextFieldDelegate
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@class UIColor;
@class UIFont;

/// A beautiful and flexible textfield implementation with support for title label, error message and placeholder.
IB_DESIGNABLE
SWIFT_CLASS("_TtC10PaymentSDK25SkyFloatingLabelTextField")
@interface SkyFloatingLabelTextField : UITextField
/// The value of the title appearing duration
@property (nonatomic) NSTimeInterval titleFadeInDuration;
/// The value of the title disappearing duration
@property (nonatomic) NSTimeInterval titleFadeOutDuration;
/// A UIColor value that determines the text color of the editable text
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColor;
/// A UIColor value that determines text color of the placeholder label
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull placeholderColor;
/// A UIFont value that determines text color of the placeholder label
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// A UIFont value that determines the text font of the title label
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// A UIColor value that determines the text color of the title label when in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull titleColor;
/// A UIColor value that determines the color of the bottom line when in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull lineColor;
/// A UIColor value that determines the color used for the title label and line when the error message is not <code>nil</code>
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull errorColor;
/// A UIColor value that determines the text color of the title label when editing
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedTitleColor;
/// A UIColor value that determines the color of the line in a selected state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedLineColor;
/// A CGFloat value that determines the height for the bottom line when the control is in the normal state
@property (nonatomic) IBInspectable CGFloat lineHeight;
/// A CGFloat value that determines the height for the bottom line when the control is in a selected state
@property (nonatomic) IBInspectable CGFloat selectedLineHeight;
/// Identifies whether the text object should hide the text being entered.
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
/// A Boolean value that determines whether the receiver is highlighted.
/// When changing this value, highlighting will be done with animation
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// The text content of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable text;
/// The String to display when the input field is empty.
/// The placeholder can also appear in the title label when both <code>title</code> <code>selectedTitle</code> and are <code>nil</code>.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// The String to display when the textfield is editing and the input is not empty.
@property (nonatomic, copy) IBInspectable NSString * _Nullable selectedTitle;
/// The String to display when the textfield is not editing and the input is not empty.
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
@property (nonatomic, getter=isSelected) BOOL selected;
/// Initializes the control
/// \param frame the frame of the control 
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Intialzies the control by deserializing it
/// \param coder the object to deserialize the control from 
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Invoked when the editing state of the textfield changes. Override to respond to this change.
- (void)editingChanged;
/// Attempt the control to become the first responder
///
/// returns:
/// True when successfull becoming the first responder
- (BOOL)becomeFirstResponder;
/// Attempt the control to resign being the first responder
///
/// returns:
/// True when successfull resigning being the first responder
- (BOOL)resignFirstResponder;
/// Calculate the rectangle for the textfield when it is not being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the textfield when it is being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the placeholder
/// \param bounds The current bounds of the placeholder
///
///
/// returns:
/// The rectangle that the placeholder should render in
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Invoked when the interface builder renders the control
- (void)prepareForInterfaceBuilder;
/// Invoked by layoutIfNeeded automatically
- (void)layoutSubviews;
/// Calculate the content size for auto layout
///
/// returns:
/// the content size to be used for auto layout
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// A beautiful and flexible textfield implementation with support for icon, title label, error message and placeholder.
SWIFT_CLASS("_TtC10PaymentSDK33SkyFloatingLabelTextFieldWithIcon")
@interface SkyFloatingLabelTextFieldWithIcon : SkyFloatingLabelTextField
/// A UIFont value that determines the font that the icon is using
@property (nonatomic, strong) UIFont * _Nullable iconFont;
/// A String value that determines the text used when displaying the icon
@property (nonatomic, copy) IBInspectable NSString * _Nullable iconText;
/// A UIColor value that determines the color of the icon in the normal state
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull iconColor;
/// A UIColor value that determines the color of the icon when the control is selected
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedIconColor;
/// A float value that determines the width of the icon
@property (nonatomic) IBInspectable CGFloat iconWidth;
/// A float value that determines the left margin of the icon.
/// Use this value to position the icon more precisely horizontally.
@property (nonatomic) IBInspectable CGFloat iconMarginLeft;
/// A float value that determines the bottom margin of the icon.
/// Use this value to position the icon more precisely vertically.
@property (nonatomic) IBInspectable CGFloat iconMarginBottom;
/// A float value that determines the rotation in degrees of the icon.
/// Use this value to rotate the icon in either direction.
@property (nonatomic) IBInspectable double iconRotationDegrees;
/// Initializes the control
/// \param frame the frame of the control 
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Intialzies the control by deserializing it
/// \param coder the object to deserialize the control from 
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Calculate the bounds for the textfield component of the control.
/// Override to create a custom size textbox in the control.
/// \param bounds The current bounds of the textfield component
///
///
/// returns:
/// The rectangle that the textfield component should render in
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculate the rectangle for the textfield when it is being edited
/// \param bounds The current bounds of the field
///
///
/// returns:
/// The rectangle that the textfield should render in
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Calculates the bounds for the placeholder component of the control.
/// Override to create a custom size textbox in the control.
/// \param bounds The current bounds of the placeholder component
///
///
/// returns:
/// The rectangle that the placeholder component should render in
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Invoked by layoutIfNeeded automatically
- (void)layoutSubviews;
@end


@interface UINavigationController (SWIFT_EXTENSION(PaymentSDK))
- (void)pushPaymentViewControllerWithDelegate:(id <PaymentCardAddedDelegate> _Nonnull)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email;
@end


@class UIView;

@interface UIViewController (SWIFT_EXTENSION(PaymentSDK))
- (PaymentAddNativeViewController * _Nonnull)addPaymentWidgetToView:(UIView * _Nonnull)containerView delegate:(id <PaymentCardAddedDelegate> _Nullable)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
- (void)presentPaymentViewControllerWithDelegate:(id <PaymentCardAddedDelegate> _Nonnull)delegate uid:(NSString * _Nonnull)uid email:(NSString * _Nonnull)email;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
